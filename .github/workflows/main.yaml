name: main

on:
  push:
    branches:
      - "master"
  pull_request:

jobs:
  # linters
  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: "frontend/package.json"
      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - run: make lint-frontend

  lint-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
      - run: make lint-backend

  lint:
    runs-on: ubuntu-latest
    needs: [lint-frontend, lint-backend]
    steps:
      - run: echo "done"

  # tests
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: "frontend/package.json"
      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - run: make test-frontend

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
      - run: make test-backend
  
  test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - run: echo "done"

  build-frontend:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: "frontend/package.json"
      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
      - name: Build frontend
        run: |
          cd frontend
          pnpm run build
      - name: Archive frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  build-backend:
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
      - name: Install backend dependencies
        run: |
          go mod download
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
      - name: Build backend binaries with frontend
        run: |
          mkdir -p dist
          cp -r frontend/dist public
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              echo "Building for $os/$arch..."
              output="dist/${os}_${arch}-filebrowser"
              if [ "$os" == "windows" ]; then
                output="${output}.exe"
              fi
              GOOS=$os GOARCH=$arch go build -o "$output"
              if [ "$os" == "linux" ]; then
                tar -czvf "${output}.tar.gz" -C dist "${os}_${arch}-filebrowser"
              else
                (cd dist && zip -r "${os}_${arch}-filebrowser.zip" "${os}_${arch}-filebrowser"*)
              fi
            done
          done
          rm -rf public
      - name: Archive backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: dist/*.{tar.gz,zip}

  release:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: List available artifacts # Debugging step
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            console.log(artifacts.data);

      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend-dist

      - name: List downloaded files
        run: ls -R backend-dist

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: backend-dist/*
          tag_name: ${{ steps.get_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

