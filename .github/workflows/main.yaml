name: main

on:
  push:
    branches:
      - "master"
  pull_request:

jobs:
  # linters
  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: "frontend/package.json"
      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - run: make lint-frontend

  lint-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
      - run: make lint-backend

  lint:
    runs-on: ubuntu-latest
    needs: [lint-frontend, lint-backend]
    steps:
      - run: echo "done"

  # tests
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: "frontend/package.json"
      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - run: make test-frontend

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
      - run: make test-backend
  
  test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - run: echo "done"

  build-frontend:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: "frontend/package.json"
      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
      - name: Build frontend
        run: |
          cd frontend
          pnpm run build
      - name: Archive frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  build-backend:
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
      - name: Install backend dependencies
        run: |
          go mod download
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
      - name: Build backend binaries with frontend
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          mkdir -p dist
          cp -r frontend/dist public
          for os in $GOOS; do
            for arch in $GOARCH; do
              echo "Building for $os/$arch..."
              GOOS=$os GOARCH=$arch go build -o dist/filebrowser_${os}_${arch}
              tar -czvf dist/filebrowser_${os}_${arch}.tar.gz -C dist filebrowser_${os}_${arch}
            done
          done
          rm -rf public
      - name: Archive backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: dist/*.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Get latest upstream tag
        id: get_tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/filebrowser/filebrowser/releases/latest | grep '"tag_name":' | sed -E 's/.*"tag_name": "([^"]+)".*/\1/')
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
      - name: Delete matching tag if it exists
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          if git ls-remote --exit-code --tags origin refs/tags/$TAG >/dev/null 2>&1; then
            echo "Tag $TAG exists. Deleting tag..."
            git push --delete origin $TAG
            echo "Tag deleted."
          else
            echo "Tag $TAG does not exist."
          fi
      - name: Create and push tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.get_tag.outputs.tag }}
          git push origin ${{ steps.get_tag.outputs.tag }}
      - uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend-dist
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: backend-dist/*.tar.gz
          tag_name: ${{ steps.get_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
  
